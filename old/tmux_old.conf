# -- general ----------------------------------------------------------------------------------------------
set -g default-terminal "screen-256color" # colors!
setw -g xterm-keys on
set -s escape-time 1
set -sg repeat-time 600
set -s focus-events on

bind r source-file ~/.config/tmux/tmux.conf
set-option -g default-command 'reattach-to-user-namespace -l $SHELL'

# -- display ----------------------------------------------------------------------------------------------

set -g base-index 1            # start windows numbering at 1
setw -g pane-base-index 1      # make pane numbering consistent with windows

setw -g automatic-rename on    # rename window to reflect current program
set -g renumber-windows on     # renumber windows when a window is closed

set-option -g allow-rename off # don't rename windows automati
set -g set-titles on           # set terminal title

set -g display-panes-time 800  # slightly longer pane indicators display time
set -g display-time 1000       # slightly longer status messages display time

set -g status-interval 10      # redraw status line every 10 seconds

set -g history-limit 10000
set -g monitor-activity on
set -g visual-activity off

# vi related config
set -sg escape-time 0
set -g status-keys vi
setw -g mode-keys vi


# -- navigation -------------------------------------------------------------------------------------------

# remap prefix from 'C-b'
unbind C-b
set-option -g prefix `
bind-key ` send-prefix

# split panes using | and -
bind | split-window -h -c '#{pane_current_path}'
bind - split-window -v -c '#{pane_current_path}'
unbind '"'
unbind %

# switch panes using Alt-arrow without prefix
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D
bind > swap-pane -D       # swap current pane with the next one
bind < swap-pane -U       # swap current pane with the previous one

bind , command-prompt -p "(rename-window '#W')" "rename-window '%%'"
bind '$' command-prompt -p "(rename-session '#S')" "rename-session '%%'"

# maximize current pane
# bind + run 'cut -c3- ~/.tmux.conf | sh -s _maximize_pane "#{session_name}" #D'

# -- design --------------------------------------------------------------------------------

# window status
setw -g window-status-format " #F#I:#W#F "
setw -g window-status-current-format " #F#I:#W#F "
setw -g window-status-format "#[fg=magenta]#[bg=black] #I #[bg=cyan]#[fg=colour8] #W "
setw -g window-status-current-format "#[bg=brightmagenta]#[fg=colour8] #I #[fg=colour8]#[bg=colour14] #W "
setw -g window-status-current-style bg=colour0,fg=colour11,dim
setw -g window-status-style bg=green,fg=black,reverse

# Info on left (I don't have a session display for now)
set -g status-left ''

# status line
set -g status-justify left
set -g status-style bg=default,fg=colour12
set -g status-interval 2

# messaging
set -g message-style fg=black,bg=yellow
set -g message-command-style fg=blue,bg=black

#window mode
setw -g mode-style bg=colour6,fg=colour0

# loud or quiet?
set-option -g visual-activity off
set-option -g visual-bell off
set-option -g visual-silence off
set-window-option -g monitor-activity off
set-option -g bell-action none


# The modes
setw -g clock-mode-colour colour135
setw -g mode-style fg=colour196,bg=colour238,bold

# The panes
set -g pane-border-style bg=colour235,fg=colour238
set -g pane-active-border-style bg=colour236,fg=colour240 #base01

# pane number display
set-option -g display-panes-active-colour colour33 #blue
set-option -g display-panes-colour colour166 #orange

# The statusbar
set -g status-position bottom
set -g status-style bg=colour234,fg=colour137,dim
set -g status-left ''
# set -g status-right '#[fg=colour233,bg=colour239,bold] Charge: #{battery_icon} #{battery_percentage} #{battery_remain} #[fg=colour233,bg=colour241,bold] %d/%m  #[fg=colour233,bg=colour245,bold] %H:%M:%S '
set -g status-right-length 90
set -g status-left-length 20

setw -g window-status-current-style fg=colour166,bg=colour238,bold
setw -g window-status-current-format ' #I#[fg=colour250]:#[fg=colour255]#W#[fg=colour50]#F '

setw -g window-status-style fg=colour138,bg=colour235,none
setw -g window-status-format ' #I#[fg=colour237]:#[fg=colour250]#W#[fg=colour244]#F '

setw -g window-status-bell-style fg=colour255,bg=colour1,bold

# The messages
set -g message-style fg=colour232,bg=colour166,bold

# -- custom methods -----------------------------------------------------------------------

# EOF
#
# # exit the script if any statement returns a non-true return value
# set -e
#
# export LC_NUMERIC=C
#
# __newline='
# '
#
# _maximize_pane() {
#   current_session=${1:-$(tmux display -p '#{session_name}')}
#   current_pane=${2:-$(tmux display -p '#{pane_id}')}
#
#   dead_panes=$(tmux list-panes -s -t "$current_session" -F '#{pane_dead} #{pane_id} #{pane_start_command}' | grep -o '^1 %.\+maximized.\+$' || true)
#   restore=$(echo "$dead_panes" | sed -n -E -e "s/^1 $current_pane .+maximized.+'(%[0-9]+)'$/tmux swap-pane -s \1 -t $current_pane \; kill-pane -t $current_pane/p" -e "s/^1 (%[0-9]+) .+maximized.+'$current_pane'$/tmux swap-pane -s \1 -t $current_pane \; kill-pane -t \1/p" )
#
#   if [ -z "$restore"  ]; then
#     [ "$(tmux list-panes -t "$current_session:" | wc -l | sed 's/^ *//g')" -eq 1  ] && tmux display "Can't maximize with only one pane" && return
#     window=$(tmux new-window -t "$current_session:" -P "exec maximized... 2> /dev/null & tmux setw -t \"$current_session:\" remain-on-exit on; printf \"Pane has been maximized, press <prefix>+ to restore. %s\" '$current_pane'")
#     window=${window%.*}
#
#     retry=10
#     while [ x"$(tmux list-panes -t "$window" -F '#{session_name}:#{window_index} #{pane_dead}' 2>/dev/null)" != x"$window 1"  ] && [ "$retry" -ne 0  ]; do
#       sleep 0.05
#       retry=$((retry - 1))
#     done
#     if [ "$retry" -eq 0  ]; then
#       tmux display 'Unable to maximize pane'
#     fi
#
#     new_pane=$(tmux display -t "$window" -p '#{pane_id}')
#     tmux setw -t "$window" remain-on-exit off \; swap-pane -s "$current_pane" -t "$new_pane"
#   else
#     $restore || tmux kill-pane
#   fi
#
# }
#
# _toggle_mouse() {
#   old=$(tmux show -gv mouse)
#   new=""
#
#   if [ "$old" = "on"  ]; then
#     new="off"
#   else
#     new="on"
#   fi
#
#   tmux set -g mouse $new \;\
#        display "mouse: $new"
# }
#
# "$@"